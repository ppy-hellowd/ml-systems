机器学习系统的核心组成部分：
 1. 业务端:
      职责: 发起模型预测请求, 接收预测结果
        轻量级请求: 只发送核心字段信息, 依赖特征系统完成特征补全
        重量级请求: 发送完整的特征数据
 2. 日志系统
      职责: 存储基础数据(实时/离线)
      
 3. 特征系统:
      职责: 从原始数据映射为模型的输入信号
        训练：训练时需要：特征，label
        预测：预测时只需要特征
        一致性：保证预测时使用的特征和训练时是一致的
        特征算子：完成从原始数据到模型输入的映射计算
      
 3. 模型训练系统
    职责：负责训练大规模机器学习模型
      输入数据：
      模型定义：按任务需求
      训练配置：使模型达到最优
      算力：为满足大数据量样本的训练时效性要求，需要大算力和高性能计算
 4. 模型服务系统：
    职责：负责接收业务端请求，获取特征，计算并返回结果
      特征：来自业务端/特征系统的数据
      模型服务：
      算力/带宽：多实例，响应高并发请求

2. 特征系统
   区别于日志系统，特征系统专为机器学习模型训练/预测服务。特征的多变性使得业务端在调用模型服务时，有极大的灵活性，但灵活性容易带来很多问题；
    1. 特征冗余: 如果业务系统每个业务有单独的模型，有些特征是可以共享的，如果相同的特征在不同模型单独使用则带来大量冗余；
    2. 冗余计算: 对特征的一些加工计算也是可以共享的, 不需要每个 pv 都重复计算；可以抽象出特征算子
    3. 一致性：特征在训练和预测时需要保持一致，特征系统可统一管理维护，使特征视图保持一致;
  基于以上原因，各公司均建设自己的特征系统，也各有特色。   

3. 大规模机器学习模型训练系统介绍：
1）. 主要挑战：
    a. 训练数据量大: 需要高并发分布式计算加速训练，large batch
    b. 特征维度高(稀疏-离散uid, uid-xx 交叉特征)，特征向量化后参数量极大，单机(GPU/CPU/内存)无法存储
    c. 模型参数量大，单机无法保存一个完整的模型
    
2）. 思路与方案：
    核心概念：参数服务器
      训练数据并行分发给多个 GPU, 多个 GPU 卡保留模型的 copy，分别前向/后向计算得到梯度，梯度通过通信把数据发给参数服务器(集群)。
     参数服务器聚合多个 GPU 的梯度后得到一个最终梯度，分发各 GPU 以更新权重。
     
    a. 数据并行: 数据并行处理，等效于 large batch
    b. 模型分区存储: 单模型多个备份，减轻参数服务器带宽压力。如果单模型参数太大，参数服务器单个机器存储不够，还可以分别存不同的网络块，参数服务器(集群)内部通信以使参数一致。
    
    改进点分析：
     1. 输入稀疏特征(id类)，需要查大的 embedding 映射表，embedding将占用太太的空间。
       解决思路：embedding 加hash 索引，并提供高速存储(SSD)，加速 embedding 表查询和更新；
     2. 主从式的参数服务器结构，有通信带宽限制
       解决思路：GPU-CPU 参数通信 -> GPU-GPU 参数通信, HBM, 异步通信
       
       
4. 模型服务框架介绍:
  基本功能: 
    服务端：接入训练好的模型；需要有好的兼容性(tensorflow, torch, xxx)和高性能(预测时间短)，扩展性(提供高并发服务)
    客户端：提供调用 API, 以调用库或独立的服务形式；业务端使用 API 获取模型预测的结果
   
    
    
参考资料:
1. https://wizardforcel.gitbooks.io/tensorflow-examples-aymericdamien/content/6.2_multigpu_cnn.html
